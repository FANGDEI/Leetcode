package com.feng.newline.dp.stock;

/**
 * @projectName: leetcode
 * @package: com.feng.newline.dp
 * @className: L123买卖股票的最佳时机III
 * @author: Ladidol
 * @description: 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例1:
 * <p>
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 *      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2：
 * <p>
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
 *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
 *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3：
 * <p>
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 * 示例 4：
 * <p>
 * 输入：prices = [1]
 * 输出：0
 * @date: 2022/9/3 19:53
 * @version: 1.0
 */
public class L123买卖股票的最佳时机III {

    // 二维dp：
    // 一天一共就有五个状态：①没有操作②第一次已经买入③第一次已经卖出④第二次已经买入⑤第二次已经卖出
    // 值得一提的是：第二次买入依赖于第一次卖出的状态，其实相当于第0天第一次买入了，第一次卖出了，然后在买入一次（第二次买入），那么现在手头上没有现金，只要买入，现金就做相应的减少。所以第二次买入操作，初始化为：dp[0][3] = -prices[0];
    class Solution {
        public int maxProfit(int[] prices) {
            int[][] dp = new int[prices.length][5];
            dp[0][1] = -prices[0];// 第一次买入；
            dp[0][3] = -prices[0];// 第二次买入；
            for (int i = 1; i < prices.length; i++) {
                dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);//第一次买入
                dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);//第一次卖出
                dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);//第二次买入
                dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);//第二次卖出
            }
//            return Math.max(dp[dp.length - 1][2], dp[dp.length - 1][4]);
            return dp[dp.length - 1][4];
        }
    }
    // 可以降成一维，和官解一样，但是为了好理解，就这个二维dp就可以啦！


}
