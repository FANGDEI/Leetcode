package top.dyw.leetcode.algorithm.dp;

/**
 * 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。
 *
 * @author Devil
 * @since 2022-11-01-12:23
 */
@SuppressWarnings("all")
public class L96不同的二叉搜索树 {

    /**
     * 动态规划 dp[i] 表示 1 到 i为节点组成的二叉搜索树的个数
     * <p>
     * 通过画图可以理解，n=3时的 以三为顶点的二叉搜索树与 n=2 时的二叉搜索树的节点有重叠 而n=2的二叉搜索树与 n=1 的搜索树有重叠
     * <p>
     * dp[3] 就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量
     * <p>
     * 元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量
     * <p>
     * 元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量
     * <p>
     * 元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量
     * <p>
     * 所以dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]
     * <p>
     *
     * 递推公式：dp[i] += dp[j - 1] * dp[i - j]; dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]
     *
     * @param n
     * @return
     */
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < i + 1; j++) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];

    }
}
